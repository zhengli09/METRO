// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// METROSummaryStats
Rcpp::List METROSummaryStats(const Rcpp::NumericMatrix betaeQTLin, const Rcpp::NumericVector betaGWASin, const Rcpp::List Dzin, const Rcpp::NumericMatrix Din, const Rcpp::NumericVector nzin, const double n, const double nu, const double hthre, const int maxIter, const double tol, const bool verbose);
RcppExport SEXP _METRO_METROSummaryStats(SEXP betaeQTLinSEXP, SEXP betaGWASinSEXP, SEXP DzinSEXP, SEXP DinSEXP, SEXP nzinSEXP, SEXP nSEXP, SEXP nuSEXP, SEXP hthreSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type betaeQTLin(betaeQTLinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type betaGWASin(betaGWASinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Dzin(DzinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type nzin(nzinSEXP);
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type hthre(hthreSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(METROSummaryStats(betaeQTLin, betaGWASin, Dzin, Din, nzin, n, nu, hthre, maxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// METROCovars
Rcpp::List METROCovars(const Rcpp::NumericMatrix betaeQTLin, const Rcpp::NumericVector betaGWASin, const Rcpp::List Dzin, const Rcpp::NumericMatrix Din, const Rcpp::NumericVector nzin, const double n, const Rcpp::NumericMatrix covGCovarsin, const Rcpp::NumericMatrix covYCovarsin, const Rcpp::NumericMatrix covCovarsin, const double nu, const double hthre, const int maxIter, const double tol, const bool verbose);
RcppExport SEXP _METRO_METROCovars(SEXP betaeQTLinSEXP, SEXP betaGWASinSEXP, SEXP DzinSEXP, SEXP DinSEXP, SEXP nzinSEXP, SEXP nSEXP, SEXP covGCovarsinSEXP, SEXP covYCovarsinSEXP, SEXP covCovarsinSEXP, SEXP nuSEXP, SEXP hthreSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type betaeQTLin(betaeQTLinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type betaGWASin(betaGWASinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Dzin(DzinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type nzin(nzinSEXP);
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type covGCovarsin(covGCovarsinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type covYCovarsin(covYCovarsinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type covCovarsin(covCovarsinSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type hthre(hthreSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(METROCovars(betaeQTLin, betaGWASin, Dzin, Din, nzin, n, covGCovarsin, covYCovarsin, covCovarsin, nu, hthre, maxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// METROSummaryStatsPleio
Rcpp::List METROSummaryStatsPleio(const Rcpp::NumericMatrix betaeQTLin, const Rcpp::NumericVector betaGWASin, const Rcpp::List Dzin, const Rcpp::NumericMatrix Din, const Rcpp::NumericVector nzin, const double n, const double nu, const double hthre, const int maxIter, const double tol, const bool verbose);
RcppExport SEXP _METRO_METROSummaryStatsPleio(SEXP betaeQTLinSEXP, SEXP betaGWASinSEXP, SEXP DzinSEXP, SEXP DinSEXP, SEXP nzinSEXP, SEXP nSEXP, SEXP nuSEXP, SEXP hthreSEXP, SEXP maxIterSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type betaeQTLin(betaeQTLinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type betaGWASin(betaGWASinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Dzin(DzinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix >::type Din(DinSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type nzin(nzinSEXP);
    Rcpp::traits::input_parameter< const double >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const double >::type hthre(hthreSEXP);
    Rcpp::traits::input_parameter< const int >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(METROSummaryStatsPleio(betaeQTLin, betaGWASin, Dzin, Din, nzin, n, nu, hthre, maxIter, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_METRO_METROSummaryStats", (DL_FUNC) &_METRO_METROSummaryStats, 11},
    {"_METRO_METROCovars", (DL_FUNC) &_METRO_METROCovars, 14},
    {"_METRO_METROSummaryStatsPleio", (DL_FUNC) &_METRO_METROSummaryStatsPleio, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_METRO(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
